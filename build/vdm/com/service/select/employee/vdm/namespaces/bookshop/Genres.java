
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.68.0
 */

package com.service.select.employee.vdm.namespaces.bookshop;

import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.result.ElementName;
import com.service.select.employee.vdm.services.BookshopService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * <p>Original entity name from the Odata EDM: <b>Genres</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class)
@JsonSerialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class)
@JsonDeserialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class)
public class Genres
    extends VdmEntity<Genres>
    implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "AdminService.Genres";
    /**
     * Selector for all available fields of Genres.
     * 
     */
    public final static SimpleProperty<Genres> ALL_FIELDS = all();
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     Name
     */
    @Nullable
    @ElementName("name")
    private java.lang.String name;
    public final static SimpleProperty.String<Genres> NAME = new SimpleProperty.String<Genres>(Genres.class, "name");
    /**
     * Constraints: Nullable, Maximum length: 1000 <p>Original property name from the Odata EDM: <b>descr</b></p>
     * 
     * @return
     *     Description
     */
    @Nullable
    @ElementName("descr")
    private java.lang.String descr;
    public final static SimpleProperty.String<Genres> DESCR = new SimpleProperty.String<Genres>(Genres.class, "descr");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @return
     *     The iD contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("ID")
    private Integer iD;
    public final static SimpleProperty.NumericInteger<Genres> ID = new SimpleProperty.NumericInteger<Genres>(Genres.class, "ID");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>parent_ID</b></p>
     * 
     * @return
     *     The parent_ID contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("parent_ID")
    private Integer parent_ID;
    public final static SimpleProperty.NumericInteger<Genres> PARENT_ID = new SimpleProperty.NumericInteger<Genres>(Genres.class, "parent_ID");
    /**
     * Navigation property <b>parent</b> for <b>Genres</b> to single <b>Genres</b>.
     * 
     */
    @ElementName("parent")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Genres toParent;
    /**
     * Navigation property <b>children</b> for <b>Genres</b> to multiple <b>Genres</b>.
     * 
     */
    @ElementName("children")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Genres> toChildren;
    /**
     * Navigation property <b>texts</b> for <b>Genres</b> to multiple <b>Genres_texts</b>.
     * 
     */
    @ElementName("texts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Genres_texts> toTexts;
    /**
     * Navigation property <b>localized</b> for <b>Genres</b> to single <b>Genres_texts</b>.
     * 
     */
    @ElementName("localized")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Genres_texts toLocalized;
    /**
     * Use with available request builders to apply the <b>parent</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Genres, Genres> TO_PARENT = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Genres, Genres>(Genres.class, "parent", Genres.class);
    /**
     * Use with available request builders to apply the <b>children</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Genres, Genres> TO_CHILDREN = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Genres, Genres>(Genres.class, "children", Genres.class);
    /**
     * Use with available request builders to apply the <b>texts</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Genres, Genres_texts> TO_TEXTS = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Genres, Genres_texts>(Genres.class, "texts", Genres_texts.class);
    /**
     * Use with available request builders to apply the <b>localized</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Genres, Genres_texts> TO_LOCALIZED = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Genres, Genres_texts>(Genres.class, "localized", Genres_texts.class);

    @Nonnull
    @Override
    public Class<Genres> getType() {
        return Genres.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     Name
     */
    public void setName(
        @Nullable
        final java.lang.String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: Nullable, Maximum length: 1000 <p>Original property name from the Odata EDM: <b>descr</b></p>
     * 
     * @param descr
     *     Description
     */
    public void setDescr(
        @Nullable
        final java.lang.String descr) {
        rememberChangedField("descr", this.descr);
        this.descr = descr;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @param iD
     *     The iD to set.
     */
    public void setID(
        @Nullable
        final Integer iD) {
        rememberChangedField("ID", this.iD);
        this.iD = iD;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>parent_ID</b></p>
     * 
     * @param parent_ID
     *     The parent_ID to set.
     */
    public void setParent_ID(
        @Nullable
        final Integer parent_ID) {
        rememberChangedField("parent_ID", this.parent_ID);
        this.parent_ID = parent_ID;
    }

    @Override
    protected java.lang.String getEntityCollection() {
        return "Genres";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey() {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("ID", getID());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields() {
        final Map<java.lang.String, Object> values = super.toMapOfFields();
        values.put("name", getName());
        values.put("descr", getDescr());
        values.put("ID", getID());
        values.put("parent_ID", getParent_ID());
        return values;
    }

    @Override
    protected void fromMap(final Map<java.lang.String, Object> inputValues) {
        final Map<java.lang.String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((java.lang.String) value));
                }
            }
            if (values.containsKey("descr")) {
                final Object value = values.remove("descr");
                if ((value == null)||(!value.equals(getDescr()))) {
                    setDescr(((java.lang.String) value));
                }
            }
            if (values.containsKey("ID")) {
                final Object value = values.remove("ID");
                if ((value == null)||(!value.equals(getID()))) {
                    setID(((Integer) value));
                }
            }
            if (values.containsKey("parent_ID")) {
                final Object value = values.remove("parent_ID");
                if ((value == null)||(!value.equals(getParent_ID()))) {
                    setParent_ID(((Integer) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("parent")) {
                final Object value = (values).remove("parent");
                if (value instanceof Map) {
                    if (toParent == null) {
                        toParent = new Genres();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) value);
                    toParent.fromMap(inputMap);
                }
            }
            if ((values).containsKey("children")) {
                final Object value = (values).remove("children");
                if (value instanceof Iterable) {
                    if (toChildren == null) {
                        toChildren = Lists.newArrayList();
                    } else {
                        toChildren = Lists.newArrayList(toChildren);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Genres entity;
                        if (toChildren.size()>i) {
                            entity = toChildren.get(i);
                        } else {
                            entity = new Genres();
                            toChildren.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("texts")) {
                final Object value = (values).remove("texts");
                if (value instanceof Iterable) {
                    if (toTexts == null) {
                        toTexts = Lists.newArrayList();
                    } else {
                        toTexts = Lists.newArrayList(toTexts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Genres_texts entity;
                        if (toTexts.size()>i) {
                            entity = toTexts.get(i);
                        } else {
                            entity = new Genres_texts();
                            toTexts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("localized")) {
                final Object value = (values).remove("localized");
                if (value instanceof Map) {
                    if (toLocalized == null) {
                        toLocalized = new Genres_texts();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) value);
                    toLocalized.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    @Override
    protected java.lang.String getDefaultServicePath() {
        return BookshopService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties() {
        final Map<java.lang.String, Object> values = super.toMapOfNavigationProperties();
        if (toParent!= null) {
            (values).put("parent", toParent);
        }
        if (toChildren!= null) {
            (values).put("children", toChildren);
        }
        if (toTexts!= null) {
            (values).put("texts", toTexts);
        }
        if (toLocalized!= null) {
            (values).put("localized", toLocalized);
        }
        return values;
    }

    /**
     * Retrieval of associated <b>Genres</b> entity (one to one). This corresponds to the OData navigation property <b>parent</b>.
     * <p>
     * If the navigation property for an entity <b>Genres</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>parent</b> is already loaded, the result will contain the <b>Genres</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Genres> getParentIfPresent() {
        return Option.of(toParent);
    }

    /**
     * Overwrites the associated <b>Genres</b> entity for the loaded navigation property <b>parent</b>.
     * 
     * @param value
     *     New <b>Genres</b> entity.
     */
    public void setParent(final Genres value) {
        toParent = value;
    }

    /**
     * Retrieval of associated <b>Genres</b> entities (one to many). This corresponds to the OData navigation property <b>children</b>.
     * <p>
     * If the navigation property for an entity <b>Genres</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>children</b> is already loaded, the result will contain the <b>Genres</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Genres>> getChildrenIfPresent() {
        return Option.of(toChildren);
    }

    /**
     * Overwrites the list of associated <b>Genres</b> entities for the loaded navigation property <b>children</b>.
     * <p>
     * If the navigation property <b>children</b> of a queried <b>Genres</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Genres</b> entities.
     */
    public void setChildren(
        @Nonnull
        final List<Genres> value) {
        if (toChildren == null) {
            toChildren = Lists.newArrayList();
        }
        toChildren.clear();
        toChildren.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Genres</b> entities. This corresponds to the OData navigation property <b>children</b>.
     * <p>
     * If the navigation property <b>children</b> of a queried <b>Genres</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Genres</b> entities.
     */
    public void addChildren(Genres... entity) {
        if (toChildren == null) {
            toChildren = Lists.newArrayList();
        }
        toChildren.addAll(Lists.newArrayList(entity));
    }

    /**
     * Retrieval of associated <b>Genres_texts</b> entities (one to many). This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property for an entity <b>Genres</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>texts</b> is already loaded, the result will contain the <b>Genres_texts</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Genres_texts>> getTextsIfPresent() {
        return Option.of(toTexts);
    }

    /**
     * Overwrites the list of associated <b>Genres_texts</b> entities for the loaded navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Genres</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Genres_texts</b> entities.
     */
    public void setTexts(
        @Nonnull
        final List<Genres_texts> value) {
        if (toTexts == null) {
            toTexts = Lists.newArrayList();
        }
        toTexts.clear();
        toTexts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Genres_texts</b> entities. This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Genres</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Genres_texts</b> entities.
     */
    public void addTexts(Genres_texts... entity) {
        if (toTexts == null) {
            toTexts = Lists.newArrayList();
        }
        toTexts.addAll(Lists.newArrayList(entity));
    }

    /**
     * Retrieval of associated <b>Genres_texts</b> entity (one to one). This corresponds to the OData navigation property <b>localized</b>.
     * <p>
     * If the navigation property for an entity <b>Genres</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>localized</b> is already loaded, the result will contain the <b>Genres_texts</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Genres_texts> getLocalizedIfPresent() {
        return Option.of(toLocalized);
    }

    /**
     * Overwrites the associated <b>Genres_texts</b> entity for the loaded navigation property <b>localized</b>.
     * 
     * @param value
     *     New <b>Genres_texts</b> entity.
     */
    public void setLocalized(final Genres_texts value) {
        toLocalized = value;
    }


    /**
     * Helper class to allow for fluent creation of Genres instances.
     * 
     */
    public final static class GenresBuilder {

        private Genres toParent;
        private List<Genres> toChildren = Lists.newArrayList();
        private List<Genres_texts> toTexts = Lists.newArrayList();
        private Genres_texts toLocalized;

        private Genres.GenresBuilder toParent(final Genres value) {
            toParent = value;
            return this;
        }

        /**
         * Navigation property <b>parent</b> for <b>Genres</b> to single <b>Genres</b>.
         * 
         * @param value
         *     The Genres to build this Genres with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Genres.GenresBuilder parent(final Genres value) {
            return toParent(value);
        }

        private Genres.GenresBuilder toChildren(final List<Genres> value) {
            toChildren.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>children</b> for <b>Genres</b> to multiple <b>Genres</b>.
         * 
         * @param value
         *     The Genress to build this Genres with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Genres.GenresBuilder children(Genres... value) {
            return toChildren(Lists.newArrayList(value));
        }

        private Genres.GenresBuilder toTexts(final List<Genres_texts> value) {
            toTexts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>texts</b> for <b>Genres</b> to multiple <b>Genres_texts</b>.
         * 
         * @param value
         *     The Genres_textss to build this Genres with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Genres.GenresBuilder texts(Genres_texts... value) {
            return toTexts(Lists.newArrayList(value));
        }

        private Genres.GenresBuilder toLocalized(final Genres_texts value) {
            toLocalized = value;
            return this;
        }

        /**
         * Navigation property <b>localized</b> for <b>Genres</b> to single <b>Genres_texts</b>.
         * 
         * @param value
         *     The Genres_texts to build this Genres with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Genres.GenresBuilder localized(final Genres_texts value) {
            return toLocalized(value);
        }

    }

}
