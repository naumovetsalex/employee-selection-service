
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.68.0
 */

package com.service.select.employee.vdm.namespaces.bookshop;

import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.result.ElementName;
import com.service.select.employee.vdm.services.BookshopService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * <p>Original entity name from the Odata EDM: <b>Books</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class)
@JsonSerialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class)
@JsonDeserialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class)
public class Books
    extends VdmEntity<Books>
    implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "AdminService.Books";
    /**
     * Selector for all available fields of Books.
     * 
     */
    public final static SimpleProperty<Books> ALL_FIELDS = all();
    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>createdAt</b></p>
     * 
     * @return
     *     The createdAt contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("createdAt")
    private OffsetDateTime createdAt;
    public final static SimpleProperty.DateTime<Books> CREATED_AT = new SimpleProperty.DateTime<Books>(Books.class, "createdAt");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>createdBy</b></p>
     * 
     * @return
     *     The createdBy contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("createdBy")
    private java.lang.String createdBy;
    public final static SimpleProperty.String<Books> CREATED_BY = new SimpleProperty.String<Books>(Books.class, "createdBy");
    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>modifiedAt</b></p>
     * 
     * @return
     *     The modifiedAt contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("modifiedAt")
    private OffsetDateTime modifiedAt;
    public final static SimpleProperty.DateTime<Books> MODIFIED_AT = new SimpleProperty.DateTime<Books>(Books.class, "modifiedAt");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>modifiedBy</b></p>
     * 
     * @return
     *     The modifiedBy contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("modifiedBy")
    private java.lang.String modifiedBy;
    public final static SimpleProperty.String<Books> MODIFIED_BY = new SimpleProperty.String<Books>(Books.class, "modifiedBy");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @return
     *     The iD contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("ID")
    private Integer iD;
    public final static SimpleProperty.NumericInteger<Books> ID = new SimpleProperty.NumericInteger<Books>(Books.class, "ID");
    /**
     * Constraints: Nullable, Maximum length: 111 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @return
     *     The title contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("title")
    private java.lang.String title;
    public final static SimpleProperty.String<Books> TITLE = new SimpleProperty.String<Books>(Books.class, "title");
    /**
     * Constraints: Nullable, Maximum length: 1111 <p>Original property name from the Odata EDM: <b>descr</b></p>
     * 
     * @return
     *     The descr contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("descr")
    private java.lang.String descr;
    public final static SimpleProperty.String<Books> DESCR = new SimpleProperty.String<Books>(Books.class, "descr");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>author_ID</b></p>
     * 
     * @return
     *     The author_ID contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("author_ID")
    private Integer author_ID;
    public final static SimpleProperty.NumericInteger<Books> AUTHOR_ID = new SimpleProperty.NumericInteger<Books>(Books.class, "author_ID");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>genre_ID</b></p>
     * 
     * @return
     *     The genre_ID contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("genre_ID")
    private Integer genre_ID;
    public final static SimpleProperty.NumericInteger<Books> GENRE_ID = new SimpleProperty.NumericInteger<Books>(Books.class, "genre_ID");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>stock</b></p>
     * 
     * @return
     *     The stock contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("stock")
    private Integer stock;
    public final static SimpleProperty.NumericInteger<Books> STOCK = new SimpleProperty.NumericInteger<Books>(Books.class, "stock");
    /**
     * Constraints: Nullable, Scale: 0 <p>Original property name from the Odata EDM: <b>price</b></p>
     * 
     * @return
     *     The price contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("price")
    private BigDecimal price;
    public final static SimpleProperty.NumericDecimal<Books> PRICE = new SimpleProperty.NumericDecimal<Books>(Books.class, "price");
    /**
     * Constraints: Nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>currency_code</b></p>
     * 
     * @return
     *     Currency code as specified by ISO 4217
     */
    @Nullable
    @ElementName("currency_code")
    private java.lang.String currency_code;
    public final static SimpleProperty.String<Books> CURRENCY_CODE = new SimpleProperty.String<Books>(Books.class, "currency_code");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>image</b></p>
     * 
     * @return
     *     The image contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("image")
    private URI image;
    /**
     * Navigation property <b>author</b> for <b>Books</b> to single <b>Authors</b>.
     * 
     */
    @ElementName("author")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Authors toAuthor;
    /**
     * Navigation property <b>genre</b> for <b>Books</b> to single <b>Genres</b>.
     * 
     */
    @ElementName("genre")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Genres toGenre;
    /**
     * Navigation property <b>currency</b> for <b>Books</b> to single <b>Currencies</b>.
     * 
     */
    @ElementName("currency")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Currencies toCurrency;
    /**
     * Navigation property <b>texts</b> for <b>Books</b> to multiple <b>Books_texts</b>.
     * 
     */
    @ElementName("texts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Books_texts> toTexts;
    /**
     * Navigation property <b>localized</b> for <b>Books</b> to single <b>Books_texts</b>.
     * 
     */
    @ElementName("localized")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Books_texts toLocalized;
    /**
     * Use with available request builders to apply the <b>author</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Authors> TO_AUTHOR = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Authors>(Books.class, "author", Authors.class);
    /**
     * Use with available request builders to apply the <b>genre</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Genres> TO_GENRE = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Genres>(Books.class, "genre", Genres.class);
    /**
     * Use with available request builders to apply the <b>currency</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Currencies> TO_CURRENCY = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Currencies>(Books.class, "currency", Currencies.class);
    /**
     * Use with available request builders to apply the <b>texts</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Books, Books_texts> TO_TEXTS = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Books, Books_texts>(Books.class, "texts", Books_texts.class);
    /**
     * Use with available request builders to apply the <b>localized</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Books_texts> TO_LOCALIZED = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Books, Books_texts>(Books.class, "localized", Books_texts.class);

    @Nonnull
    @Override
    public Class<Books> getType() {
        return Books.class;
    }

    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>createdAt</b></p>
     * 
     * @param createdAt
     *     The createdAt to set.
     */
    public void setCreatedAt(
        @Nullable
        final OffsetDateTime createdAt) {
        rememberChangedField("createdAt", this.createdAt);
        this.createdAt = createdAt;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>createdBy</b></p>
     * 
     * @param createdBy
     *     The createdBy to set.
     */
    public void setCreatedBy(
        @Nullable
        final java.lang.String createdBy) {
        rememberChangedField("createdBy", this.createdBy);
        this.createdBy = createdBy;
    }

    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>modifiedAt</b></p>
     * 
     * @param modifiedAt
     *     The modifiedAt to set.
     */
    public void setModifiedAt(
        @Nullable
        final OffsetDateTime modifiedAt) {
        rememberChangedField("modifiedAt", this.modifiedAt);
        this.modifiedAt = modifiedAt;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>modifiedBy</b></p>
     * 
     * @param modifiedBy
     *     The modifiedBy to set.
     */
    public void setModifiedBy(
        @Nullable
        final java.lang.String modifiedBy) {
        rememberChangedField("modifiedBy", this.modifiedBy);
        this.modifiedBy = modifiedBy;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @param iD
     *     The iD to set.
     */
    public void setID(
        @Nullable
        final Integer iD) {
        rememberChangedField("ID", this.iD);
        this.iD = iD;
    }

    /**
     * Constraints: Nullable, Maximum length: 111 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final java.lang.String title) {
        rememberChangedField("title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Nullable, Maximum length: 1111 <p>Original property name from the Odata EDM: <b>descr</b></p>
     * 
     * @param descr
     *     The descr to set.
     */
    public void setDescr(
        @Nullable
        final java.lang.String descr) {
        rememberChangedField("descr", this.descr);
        this.descr = descr;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>author_ID</b></p>
     * 
     * @param author_ID
     *     The author_ID to set.
     */
    public void setAuthor_ID(
        @Nullable
        final Integer author_ID) {
        rememberChangedField("author_ID", this.author_ID);
        this.author_ID = author_ID;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>genre_ID</b></p>
     * 
     * @param genre_ID
     *     The genre_ID to set.
     */
    public void setGenre_ID(
        @Nullable
        final Integer genre_ID) {
        rememberChangedField("genre_ID", this.genre_ID);
        this.genre_ID = genre_ID;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>stock</b></p>
     * 
     * @param stock
     *     The stock to set.
     */
    public void setStock(
        @Nullable
        final Integer stock) {
        rememberChangedField("stock", this.stock);
        this.stock = stock;
    }

    /**
     * Constraints: Nullable, Scale: 0 <p>Original property name from the Odata EDM: <b>price</b></p>
     * 
     * @param price
     *     The price to set.
     */
    public void setPrice(
        @Nullable
        final BigDecimal price) {
        rememberChangedField("price", this.price);
        this.price = price;
    }

    /**
     * Constraints: Nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>currency_code</b></p>
     * 
     * @param currency_code
     *     Currency code as specified by ISO 4217
     */
    public void setCurrency_code(
        @Nullable
        final java.lang.String currency_code) {
        rememberChangedField("currency_code", this.currency_code);
        this.currency_code = currency_code;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>image</b></p>
     * 
     * @param image
     *     The image to set.
     */
    public void setImage(
        @Nullable
        final URI image) {
        rememberChangedField("image", this.image);
        this.image = image;
    }

    @Override
    protected java.lang.String getEntityCollection() {
        return "Books";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey() {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("ID", getID());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields() {
        final Map<java.lang.String, Object> values = super.toMapOfFields();
        values.put("createdAt", getCreatedAt());
        values.put("createdBy", getCreatedBy());
        values.put("modifiedAt", getModifiedAt());
        values.put("modifiedBy", getModifiedBy());
        values.put("ID", getID());
        values.put("title", getTitle());
        values.put("descr", getDescr());
        values.put("author_ID", getAuthor_ID());
        values.put("genre_ID", getGenre_ID());
        values.put("stock", getStock());
        values.put("price", getPrice());
        values.put("currency_code", getCurrency_code());
        values.put("image", getImage());
        return values;
    }

    @Override
    protected void fromMap(final Map<java.lang.String, Object> inputValues) {
        final Map<java.lang.String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("createdAt")) {
                final Object value = values.remove("createdAt");
                if ((value == null)||(!value.equals(getCreatedAt()))) {
                    setCreatedAt(((OffsetDateTime) value));
                }
            }
            if (values.containsKey("createdBy")) {
                final Object value = values.remove("createdBy");
                if ((value == null)||(!value.equals(getCreatedBy()))) {
                    setCreatedBy(((java.lang.String) value));
                }
            }
            if (values.containsKey("modifiedAt")) {
                final Object value = values.remove("modifiedAt");
                if ((value == null)||(!value.equals(getModifiedAt()))) {
                    setModifiedAt(((OffsetDateTime) value));
                }
            }
            if (values.containsKey("modifiedBy")) {
                final Object value = values.remove("modifiedBy");
                if ((value == null)||(!value.equals(getModifiedBy()))) {
                    setModifiedBy(((java.lang.String) value));
                }
            }
            if (values.containsKey("ID")) {
                final Object value = values.remove("ID");
                if ((value == null)||(!value.equals(getID()))) {
                    setID(((Integer) value));
                }
            }
            if (values.containsKey("title")) {
                final Object value = values.remove("title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((java.lang.String) value));
                }
            }
            if (values.containsKey("descr")) {
                final Object value = values.remove("descr");
                if ((value == null)||(!value.equals(getDescr()))) {
                    setDescr(((java.lang.String) value));
                }
            }
            if (values.containsKey("author_ID")) {
                final Object value = values.remove("author_ID");
                if ((value == null)||(!value.equals(getAuthor_ID()))) {
                    setAuthor_ID(((Integer) value));
                }
            }
            if (values.containsKey("genre_ID")) {
                final Object value = values.remove("genre_ID");
                if ((value == null)||(!value.equals(getGenre_ID()))) {
                    setGenre_ID(((Integer) value));
                }
            }
            if (values.containsKey("stock")) {
                final Object value = values.remove("stock");
                if ((value == null)||(!value.equals(getStock()))) {
                    setStock(((Integer) value));
                }
            }
            if (values.containsKey("price")) {
                final Object value = values.remove("price");
                if ((value == null)||(!value.equals(getPrice()))) {
                    setPrice(((BigDecimal) value));
                }
            }
            if (values.containsKey("currency_code")) {
                final Object value = values.remove("currency_code");
                if ((value == null)||(!value.equals(getCurrency_code()))) {
                    setCurrency_code(((java.lang.String) value));
                }
            }
            if (values.containsKey("image")) {
                final Object value = values.remove("image");
                if ((value == null)||(!value.equals(getImage()))) {
                    setImage(((URI) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("author")) {
                final Object value = (values).remove("author");
                if (value instanceof Map) {
                    if (toAuthor == null) {
                        toAuthor = new Authors();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) value);
                    toAuthor.fromMap(inputMap);
                }
            }
            if ((values).containsKey("genre")) {
                final Object value = (values).remove("genre");
                if (value instanceof Map) {
                    if (toGenre == null) {
                        toGenre = new Genres();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) value);
                    toGenre.fromMap(inputMap);
                }
            }
            if ((values).containsKey("currency")) {
                final Object value = (values).remove("currency");
                if (value instanceof Map) {
                    if (toCurrency == null) {
                        toCurrency = new Currencies();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) value);
                    toCurrency.fromMap(inputMap);
                }
            }
            if ((values).containsKey("texts")) {
                final Object value = (values).remove("texts");
                if (value instanceof Iterable) {
                    if (toTexts == null) {
                        toTexts = Lists.newArrayList();
                    } else {
                        toTexts = Lists.newArrayList(toTexts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Books_texts entity;
                        if (toTexts.size()>i) {
                            entity = toTexts.get(i);
                        } else {
                            entity = new Books_texts();
                            toTexts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("localized")) {
                final Object value = (values).remove("localized");
                if (value instanceof Map) {
                    if (toLocalized == null) {
                        toLocalized = new Books_texts();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) value);
                    toLocalized.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    @Override
    protected java.lang.String getDefaultServicePath() {
        return BookshopService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties() {
        final Map<java.lang.String, Object> values = super.toMapOfNavigationProperties();
        if (toAuthor!= null) {
            (values).put("author", toAuthor);
        }
        if (toGenre!= null) {
            (values).put("genre", toGenre);
        }
        if (toCurrency!= null) {
            (values).put("currency", toCurrency);
        }
        if (toTexts!= null) {
            (values).put("texts", toTexts);
        }
        if (toLocalized!= null) {
            (values).put("localized", toLocalized);
        }
        return values;
    }

    /**
     * Retrieval of associated <b>Authors</b> entity (one to one). This corresponds to the OData navigation property <b>author</b>.
     * <p>
     * If the navigation property for an entity <b>Books</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>author</b> is already loaded, the result will contain the <b>Authors</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Authors> getAuthorIfPresent() {
        return Option.of(toAuthor);
    }

    /**
     * Overwrites the associated <b>Authors</b> entity for the loaded navigation property <b>author</b>.
     * 
     * @param value
     *     New <b>Authors</b> entity.
     */
    public void setAuthor(final Authors value) {
        toAuthor = value;
    }

    /**
     * Retrieval of associated <b>Genres</b> entity (one to one). This corresponds to the OData navigation property <b>genre</b>.
     * <p>
     * If the navigation property for an entity <b>Books</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>genre</b> is already loaded, the result will contain the <b>Genres</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Genres> getGenreIfPresent() {
        return Option.of(toGenre);
    }

    /**
     * Overwrites the associated <b>Genres</b> entity for the loaded navigation property <b>genre</b>.
     * 
     * @param value
     *     New <b>Genres</b> entity.
     */
    public void setGenre(final Genres value) {
        toGenre = value;
    }

    /**
     * Retrieval of associated <b>Currencies</b> entity (one to one). This corresponds to the OData navigation property <b>currency</b>.
     * <p>
     * If the navigation property for an entity <b>Books</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>currency</b> is already loaded, the result will contain the <b>Currencies</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Currencies> getCurrencyIfPresent() {
        return Option.of(toCurrency);
    }

    /**
     * Overwrites the associated <b>Currencies</b> entity for the loaded navigation property <b>currency</b>.
     * 
     * @param value
     *     New <b>Currencies</b> entity.
     */
    public void setCurrency(final Currencies value) {
        toCurrency = value;
    }

    /**
     * Retrieval of associated <b>Books_texts</b> entities (one to many). This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property for an entity <b>Books</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>texts</b> is already loaded, the result will contain the <b>Books_texts</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Books_texts>> getTextsIfPresent() {
        return Option.of(toTexts);
    }

    /**
     * Overwrites the list of associated <b>Books_texts</b> entities for the loaded navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Books</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Books_texts</b> entities.
     */
    public void setTexts(
        @Nonnull
        final List<Books_texts> value) {
        if (toTexts == null) {
            toTexts = Lists.newArrayList();
        }
        toTexts.clear();
        toTexts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Books_texts</b> entities. This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Books</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Books_texts</b> entities.
     */
    public void addTexts(Books_texts... entity) {
        if (toTexts == null) {
            toTexts = Lists.newArrayList();
        }
        toTexts.addAll(Lists.newArrayList(entity));
    }

    /**
     * Retrieval of associated <b>Books_texts</b> entity (one to one). This corresponds to the OData navigation property <b>localized</b>.
     * <p>
     * If the navigation property for an entity <b>Books</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>localized</b> is already loaded, the result will contain the <b>Books_texts</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Books_texts> getLocalizedIfPresent() {
        return Option.of(toLocalized);
    }

    /**
     * Overwrites the associated <b>Books_texts</b> entity for the loaded navigation property <b>localized</b>.
     * 
     * @param value
     *     New <b>Books_texts</b> entity.
     */
    public void setLocalized(final Books_texts value) {
        toLocalized = value;
    }


    /**
     * Helper class to allow for fluent creation of Books instances.
     * 
     */
    public final static class BooksBuilder {

        private Authors toAuthor;
        private Genres toGenre;
        private Currencies toCurrency;
        private List<Books_texts> toTexts = Lists.newArrayList();
        private Books_texts toLocalized;

        private Books.BooksBuilder toAuthor(final Authors value) {
            toAuthor = value;
            return this;
        }

        /**
         * Navigation property <b>author</b> for <b>Books</b> to single <b>Authors</b>.
         * 
         * @param value
         *     The Authors to build this Books with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Books.BooksBuilder author(final Authors value) {
            return toAuthor(value);
        }

        private Books.BooksBuilder toGenre(final Genres value) {
            toGenre = value;
            return this;
        }

        /**
         * Navigation property <b>genre</b> for <b>Books</b> to single <b>Genres</b>.
         * 
         * @param value
         *     The Genres to build this Books with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Books.BooksBuilder genre(final Genres value) {
            return toGenre(value);
        }

        private Books.BooksBuilder toCurrency(final Currencies value) {
            toCurrency = value;
            return this;
        }

        /**
         * Navigation property <b>currency</b> for <b>Books</b> to single <b>Currencies</b>.
         * 
         * @param value
         *     The Currencies to build this Books with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Books.BooksBuilder currency(final Currencies value) {
            return toCurrency(value);
        }

        private Books.BooksBuilder toTexts(final List<Books_texts> value) {
            toTexts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>texts</b> for <b>Books</b> to multiple <b>Books_texts</b>.
         * 
         * @param value
         *     The Books_textss to build this Books with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Books.BooksBuilder texts(Books_texts... value) {
            return toTexts(Lists.newArrayList(value));
        }

        private Books.BooksBuilder toLocalized(final Books_texts value) {
            toLocalized = value;
            return this;
        }

        /**
         * Navigation property <b>localized</b> for <b>Books</b> to single <b>Books_texts</b>.
         * 
         * @param value
         *     The Books_texts to build this Books with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Books.BooksBuilder localized(final Books_texts value) {
            return toLocalized(value);
        }

    }

}
