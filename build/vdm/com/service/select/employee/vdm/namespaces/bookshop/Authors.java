
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.68.0
 */

package com.service.select.employee.vdm.namespaces.bookshop;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.result.ElementName;
import com.service.select.employee.vdm.services.BookshopService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * <p>Original entity name from the Odata EDM: <b>Authors</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class)
@JsonSerialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class)
@JsonDeserialize(using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class)
public class Authors
    extends VdmEntity<Authors>
    implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "AdminService.Authors";
    /**
     * Selector for all available fields of Authors.
     * 
     */
    public final static SimpleProperty<Authors> ALL_FIELDS = all();
    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>createdAt</b></p>
     * 
     * @return
     *     The createdAt contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("createdAt")
    private OffsetDateTime createdAt;
    public final static SimpleProperty.DateTime<Authors> CREATED_AT = new SimpleProperty.DateTime<Authors>(Authors.class, "createdAt");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>createdBy</b></p>
     * 
     * @return
     *     The createdBy contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("createdBy")
    private java.lang.String createdBy;
    public final static SimpleProperty.String<Authors> CREATED_BY = new SimpleProperty.String<Authors>(Authors.class, "createdBy");
    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>modifiedAt</b></p>
     * 
     * @return
     *     The modifiedAt contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("modifiedAt")
    private OffsetDateTime modifiedAt;
    public final static SimpleProperty.DateTime<Authors> MODIFIED_AT = new SimpleProperty.DateTime<Authors>(Authors.class, "modifiedAt");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>modifiedBy</b></p>
     * 
     * @return
     *     The modifiedBy contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("modifiedBy")
    private java.lang.String modifiedBy;
    public final static SimpleProperty.String<Authors> MODIFIED_BY = new SimpleProperty.String<Authors>(Authors.class, "modifiedBy");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @return
     *     The iD contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("ID")
    private Integer iD;
    public final static SimpleProperty.NumericInteger<Authors> ID = new SimpleProperty.NumericInteger<Authors>(Authors.class, "ID");
    /**
     * Constraints: Nullable, Maximum length: 111 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @return
     *     The name contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("name")
    private java.lang.String name;
    public final static SimpleProperty.String<Authors> NAME = new SimpleProperty.String<Authors>(Authors.class, "name");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>dateOfBirth</b></p>
     * 
     * @return
     *     The dateOfBirth contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("dateOfBirth")
    private LocalDate dateOfBirth;
    public final static SimpleProperty.Date<Authors> DATE_OF_BIRTH = new SimpleProperty.Date<Authors>(Authors.class, "dateOfBirth");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>dateOfDeath</b></p>
     * 
     * @return
     *     The dateOfDeath contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("dateOfDeath")
    private LocalDate dateOfDeath;
    public final static SimpleProperty.Date<Authors> DATE_OF_DEATH = new SimpleProperty.Date<Authors>(Authors.class, "dateOfDeath");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>placeOfBirth</b></p>
     * 
     * @return
     *     The placeOfBirth contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("placeOfBirth")
    private java.lang.String placeOfBirth;
    public final static SimpleProperty.String<Authors> PLACE_OF_BIRTH = new SimpleProperty.String<Authors>(Authors.class, "placeOfBirth");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>placeOfDeath</b></p>
     * 
     * @return
     *     The placeOfDeath contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName("placeOfDeath")
    private java.lang.String placeOfDeath;
    public final static SimpleProperty.String<Authors> PLACE_OF_DEATH = new SimpleProperty.String<Authors>(Authors.class, "placeOfDeath");
    /**
     * Navigation property <b>books</b> for <b>Authors</b> to multiple <b>Books</b>.
     * 
     */
    @ElementName("books")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Books> toBooks;
    /**
     * Use with available request builders to apply the <b>books</b> navigation property to query operations.
     * 
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Authors, Books> TO_BOOKS = new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Authors, Books>(Authors.class, "books", Books.class);

    @Nonnull
    @Override
    public Class<Authors> getType() {
        return Authors.class;
    }

    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>createdAt</b></p>
     * 
     * @param createdAt
     *     The createdAt to set.
     */
    public void setCreatedAt(
        @Nullable
        final OffsetDateTime createdAt) {
        rememberChangedField("createdAt", this.createdAt);
        this.createdAt = createdAt;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>createdBy</b></p>
     * 
     * @param createdBy
     *     The createdBy to set.
     */
    public void setCreatedBy(
        @Nullable
        final java.lang.String createdBy) {
        rememberChangedField("createdBy", this.createdBy);
        this.createdBy = createdBy;
    }

    /**
     * Constraints: Nullable, Precision: 7 <p>Original property name from the Odata EDM: <b>modifiedAt</b></p>
     * 
     * @param modifiedAt
     *     The modifiedAt to set.
     */
    public void setModifiedAt(
        @Nullable
        final OffsetDateTime modifiedAt) {
        rememberChangedField("modifiedAt", this.modifiedAt);
        this.modifiedAt = modifiedAt;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>modifiedBy</b></p>
     * 
     * @param modifiedBy
     *     The modifiedBy to set.
     */
    public void setModifiedBy(
        @Nullable
        final java.lang.String modifiedBy) {
        rememberChangedField("modifiedBy", this.modifiedBy);
        this.modifiedBy = modifiedBy;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @param iD
     *     The iD to set.
     */
    public void setID(
        @Nullable
        final Integer iD) {
        rememberChangedField("ID", this.iD);
        this.iD = iD;
    }

    /**
     * Constraints: Nullable, Maximum length: 111 <p>Original property name from the Odata EDM: <b>name</b></p>
     * 
     * @param name
     *     The name to set.
     */
    public void setName(
        @Nullable
        final java.lang.String name) {
        rememberChangedField("name", this.name);
        this.name = name;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>dateOfBirth</b></p>
     * 
     * @param dateOfBirth
     *     The dateOfBirth to set.
     */
    public void setDateOfBirth(
        @Nullable
        final LocalDate dateOfBirth) {
        rememberChangedField("dateOfBirth", this.dateOfBirth);
        this.dateOfBirth = dateOfBirth;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>dateOfDeath</b></p>
     * 
     * @param dateOfDeath
     *     The dateOfDeath to set.
     */
    public void setDateOfDeath(
        @Nullable
        final LocalDate dateOfDeath) {
        rememberChangedField("dateOfDeath", this.dateOfDeath);
        this.dateOfDeath = dateOfDeath;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>placeOfBirth</b></p>
     * 
     * @param placeOfBirth
     *     The placeOfBirth to set.
     */
    public void setPlaceOfBirth(
        @Nullable
        final java.lang.String placeOfBirth) {
        rememberChangedField("placeOfBirth", this.placeOfBirth);
        this.placeOfBirth = placeOfBirth;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>placeOfDeath</b></p>
     * 
     * @param placeOfDeath
     *     The placeOfDeath to set.
     */
    public void setPlaceOfDeath(
        @Nullable
        final java.lang.String placeOfDeath) {
        rememberChangedField("placeOfDeath", this.placeOfDeath);
        this.placeOfDeath = placeOfDeath;
    }

    @Override
    protected java.lang.String getEntityCollection() {
        return "Authors";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey() {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("ID", getID());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields() {
        final Map<java.lang.String, Object> values = super.toMapOfFields();
        values.put("createdAt", getCreatedAt());
        values.put("createdBy", getCreatedBy());
        values.put("modifiedAt", getModifiedAt());
        values.put("modifiedBy", getModifiedBy());
        values.put("ID", getID());
        values.put("name", getName());
        values.put("dateOfBirth", getDateOfBirth());
        values.put("dateOfDeath", getDateOfDeath());
        values.put("placeOfBirth", getPlaceOfBirth());
        values.put("placeOfDeath", getPlaceOfDeath());
        return values;
    }

    @Override
    protected void fromMap(final Map<java.lang.String, Object> inputValues) {
        final Map<java.lang.String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("createdAt")) {
                final Object value = values.remove("createdAt");
                if ((value == null)||(!value.equals(getCreatedAt()))) {
                    setCreatedAt(((OffsetDateTime) value));
                }
            }
            if (values.containsKey("createdBy")) {
                final Object value = values.remove("createdBy");
                if ((value == null)||(!value.equals(getCreatedBy()))) {
                    setCreatedBy(((java.lang.String) value));
                }
            }
            if (values.containsKey("modifiedAt")) {
                final Object value = values.remove("modifiedAt");
                if ((value == null)||(!value.equals(getModifiedAt()))) {
                    setModifiedAt(((OffsetDateTime) value));
                }
            }
            if (values.containsKey("modifiedBy")) {
                final Object value = values.remove("modifiedBy");
                if ((value == null)||(!value.equals(getModifiedBy()))) {
                    setModifiedBy(((java.lang.String) value));
                }
            }
            if (values.containsKey("ID")) {
                final Object value = values.remove("ID");
                if ((value == null)||(!value.equals(getID()))) {
                    setID(((Integer) value));
                }
            }
            if (values.containsKey("name")) {
                final Object value = values.remove("name");
                if ((value == null)||(!value.equals(getName()))) {
                    setName(((java.lang.String) value));
                }
            }
            if (values.containsKey("dateOfBirth")) {
                final Object value = values.remove("dateOfBirth");
                if ((value == null)||(!value.equals(getDateOfBirth()))) {
                    setDateOfBirth(((LocalDate) value));
                }
            }
            if (values.containsKey("dateOfDeath")) {
                final Object value = values.remove("dateOfDeath");
                if ((value == null)||(!value.equals(getDateOfDeath()))) {
                    setDateOfDeath(((LocalDate) value));
                }
            }
            if (values.containsKey("placeOfBirth")) {
                final Object value = values.remove("placeOfBirth");
                if ((value == null)||(!value.equals(getPlaceOfBirth()))) {
                    setPlaceOfBirth(((java.lang.String) value));
                }
            }
            if (values.containsKey("placeOfDeath")) {
                final Object value = values.remove("placeOfDeath");
                if ((value == null)||(!value.equals(getPlaceOfDeath()))) {
                    setPlaceOfDeath(((java.lang.String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("books")) {
                final Object value = (values).remove("books");
                if (value instanceof Iterable) {
                    if (toBooks == null) {
                        toBooks = Lists.newArrayList();
                    } else {
                        toBooks = Lists.newArrayList(toBooks);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Books entity;
                        if (toBooks.size()>i) {
                            entity = toBooks.get(i);
                        } else {
                            entity = new Books();
                            toBooks.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    @Override
    protected java.lang.String getDefaultServicePath() {
        return BookshopService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties() {
        final Map<java.lang.String, Object> values = super.toMapOfNavigationProperties();
        if (toBooks!= null) {
            (values).put("books", toBooks);
        }
        return values;
    }

    /**
     * Retrieval of associated <b>Books</b> entities (one to many). This corresponds to the OData navigation property <b>books</b>.
     * <p>
     * If the navigation property for an entity <b>Authors</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>books</b> is already loaded, the result will contain the <b>Books</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Books>> getBooksIfPresent() {
        return Option.of(toBooks);
    }

    /**
     * Overwrites the list of associated <b>Books</b> entities for the loaded navigation property <b>books</b>.
     * <p>
     * If the navigation property <b>books</b> of a queried <b>Authors</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Books</b> entities.
     */
    public void setBooks(
        @Nonnull
        final List<Books> value) {
        if (toBooks == null) {
            toBooks = Lists.newArrayList();
        }
        toBooks.clear();
        toBooks.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Books</b> entities. This corresponds to the OData navigation property <b>books</b>.
     * <p>
     * If the navigation property <b>books</b> of a queried <b>Authors</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Books</b> entities.
     */
    public void addBooks(Books... entity) {
        if (toBooks == null) {
            toBooks = Lists.newArrayList();
        }
        toBooks.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of Authors instances.
     * 
     */
    public final static class AuthorsBuilder {

        private List<Books> toBooks = Lists.newArrayList();

        private Authors.AuthorsBuilder toBooks(final List<Books> value) {
            toBooks.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>books</b> for <b>Authors</b> to multiple <b>Books</b>.
         * 
         * @param value
         *     The Bookss to build this Authors with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Authors.AuthorsBuilder books(Books... value) {
            return toBooks(Lists.newArrayList(value));
        }

    }

}
