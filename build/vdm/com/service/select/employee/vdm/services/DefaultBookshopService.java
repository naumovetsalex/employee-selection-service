
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.68.0
 */

package com.service.select.employee.vdm.services;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.inject.Named;
import com.sap.cloud.sdk.datamodel.odatav4.core.BatchRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.CountRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.CreateRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.DeleteRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.GetAllRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.GetByKeyRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.ServiceWithNavigableEntities;
import com.sap.cloud.sdk.datamodel.odatav4.core.UpdateRequestBuilder;
import com.service.select.employee.vdm.namespaces.bookshop.Authors;
import com.service.select.employee.vdm.namespaces.bookshop.Books;
import com.service.select.employee.vdm.namespaces.bookshop.Books_texts;
import com.service.select.employee.vdm.namespaces.bookshop.Currencies;
import com.service.select.employee.vdm.namespaces.bookshop.Currencies_texts;
import com.service.select.employee.vdm.namespaces.bookshop.Genres;
import com.service.select.employee.vdm.namespaces.bookshop.Genres_texts;
import lombok.Getter;


/**
 * <h3>Details:</h3><table summary='Details'><tr><td align='right'>OData Service:</td><td>bookshop</td></tr></table>
 * 
 */
@Named("com.service.select.employee.vdm.services.DefaultBookshopService")
public class DefaultBookshopService
    implements ServiceWithNavigableEntities, BookshopService
{

    @Nonnull
    @Getter
    private final String servicePath;

    /**
     * Creates a service using {@link BookshopService#DEFAULT_SERVICE_PATH} to send the requests.
     * 
     */
    public DefaultBookshopService() {
        servicePath = BookshopService.DEFAULT_SERVICE_PATH;
    }

    /**
     * Creates a service using the provided service path to send the requests.
     * <p>
     * Used by the fluent {@link #withServicePath(String)} method.
     * 
     */
    private DefaultBookshopService(
        @Nonnull
        final String servicePath) {
        this.servicePath = servicePath;
    }

    @Override
    @Nonnull
    public DefaultBookshopService withServicePath(
        @Nonnull
        final String servicePath) {
        return new DefaultBookshopService(servicePath);
    }

    @Override
    @Nonnull
    public BatchRequestBuilder batch() {
        return new BatchRequestBuilder(servicePath);
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Books> getAllBooks() {
        return new GetAllRequestBuilder<Books>(servicePath, Books.class, "Books");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Books> countBooks() {
        return new CountRequestBuilder<Books>(servicePath, Books.class, "Books");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Books> getBooksByKey(
        @Nonnull
        final Integer iD) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ID", iD);
        return new GetByKeyRequestBuilder<Books>(servicePath, Books.class, key, "Books");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Books> createBooks(
        @Nonnull
        final Books books) {
        return new CreateRequestBuilder<Books>(servicePath, books, "Books");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Books> updateBooks(
        @Nonnull
        final Books books) {
        return new UpdateRequestBuilder<Books>(servicePath, books, "Books");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Books> deleteBooks(
        @Nonnull
        final Books books) {
        return new DeleteRequestBuilder<Books>(servicePath, books, "Books");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Authors> getAllAuthors() {
        return new GetAllRequestBuilder<Authors>(servicePath, Authors.class, "Authors");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Authors> countAuthors() {
        return new CountRequestBuilder<Authors>(servicePath, Authors.class, "Authors");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Authors> getAuthorsByKey(
        @Nonnull
        final Integer iD) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ID", iD);
        return new GetByKeyRequestBuilder<Authors>(servicePath, Authors.class, key, "Authors");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Authors> createAuthors(
        @Nonnull
        final Authors authors) {
        return new CreateRequestBuilder<Authors>(servicePath, authors, "Authors");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Authors> updateAuthors(
        @Nonnull
        final Authors authors) {
        return new UpdateRequestBuilder<Authors>(servicePath, authors, "Authors");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Authors> deleteAuthors(
        @Nonnull
        final Authors authors) {
        return new DeleteRequestBuilder<Authors>(servicePath, authors, "Authors");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Genres> getAllGenres() {
        return new GetAllRequestBuilder<Genres>(servicePath, Genres.class, "Genres");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Genres> countGenres() {
        return new CountRequestBuilder<Genres>(servicePath, Genres.class, "Genres");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Genres> getGenresByKey(
        @Nonnull
        final Integer iD) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("ID", iD);
        return new GetByKeyRequestBuilder<Genres>(servicePath, Genres.class, key, "Genres");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Genres> createGenres(
        @Nonnull
        final Genres genres) {
        return new CreateRequestBuilder<Genres>(servicePath, genres, "Genres");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Genres> updateGenres(
        @Nonnull
        final Genres genres) {
        return new UpdateRequestBuilder<Genres>(servicePath, genres, "Genres");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Genres> deleteGenres(
        @Nonnull
        final Genres genres) {
        return new DeleteRequestBuilder<Genres>(servicePath, genres, "Genres");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Currencies> getAllCurrencies() {
        return new GetAllRequestBuilder<Currencies>(servicePath, Currencies.class, "Currencies");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Currencies> countCurrencies() {
        return new CountRequestBuilder<Currencies>(servicePath, Currencies.class, "Currencies");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Currencies> getCurrenciesByKey(
        @Nonnull
        final String code) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("code", code);
        return new GetByKeyRequestBuilder<Currencies>(servicePath, Currencies.class, key, "Currencies");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Currencies> createCurrencies(
        @Nonnull
        final Currencies currencies) {
        return new CreateRequestBuilder<Currencies>(servicePath, currencies, "Currencies");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Currencies> updateCurrencies(
        @Nonnull
        final Currencies currencies) {
        return new UpdateRequestBuilder<Currencies>(servicePath, currencies, "Currencies");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Currencies> deleteCurrencies(
        @Nonnull
        final Currencies currencies) {
        return new DeleteRequestBuilder<Currencies>(servicePath, currencies, "Currencies");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Books_texts> getAllBooks_texts() {
        return new GetAllRequestBuilder<Books_texts>(servicePath, Books_texts.class, "Books_texts");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Books_texts> countBooks_texts() {
        return new CountRequestBuilder<Books_texts>(servicePath, Books_texts.class, "Books_texts");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Books_texts> getBooks_textsByKey(
        @Nonnull
        final String locale,
        @Nonnull
        final Integer iD) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("locale", locale);
        key.put("ID", iD);
        return new GetByKeyRequestBuilder<Books_texts>(servicePath, Books_texts.class, key, "Books_texts");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Books_texts> createBooks_texts(
        @Nonnull
        final Books_texts books_texts) {
        return new CreateRequestBuilder<Books_texts>(servicePath, books_texts, "Books_texts");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Books_texts> updateBooks_texts(
        @Nonnull
        final Books_texts books_texts) {
        return new UpdateRequestBuilder<Books_texts>(servicePath, books_texts, "Books_texts");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Books_texts> deleteBooks_texts(
        @Nonnull
        final Books_texts books_texts) {
        return new DeleteRequestBuilder<Books_texts>(servicePath, books_texts, "Books_texts");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Genres_texts> getAllGenres_texts() {
        return new GetAllRequestBuilder<Genres_texts>(servicePath, Genres_texts.class, "Genres_texts");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Genres_texts> countGenres_texts() {
        return new CountRequestBuilder<Genres_texts>(servicePath, Genres_texts.class, "Genres_texts");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Genres_texts> getGenres_textsByKey(
        @Nonnull
        final String locale,
        @Nonnull
        final Integer iD) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("locale", locale);
        key.put("ID", iD);
        return new GetByKeyRequestBuilder<Genres_texts>(servicePath, Genres_texts.class, key, "Genres_texts");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Genres_texts> createGenres_texts(
        @Nonnull
        final Genres_texts genres_texts) {
        return new CreateRequestBuilder<Genres_texts>(servicePath, genres_texts, "Genres_texts");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Genres_texts> updateGenres_texts(
        @Nonnull
        final Genres_texts genres_texts) {
        return new UpdateRequestBuilder<Genres_texts>(servicePath, genres_texts, "Genres_texts");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Genres_texts> deleteGenres_texts(
        @Nonnull
        final Genres_texts genres_texts) {
        return new DeleteRequestBuilder<Genres_texts>(servicePath, genres_texts, "Genres_texts");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Currencies_texts> getAllCurrencies_texts() {
        return new GetAllRequestBuilder<Currencies_texts>(servicePath, Currencies_texts.class, "Currencies_texts");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Currencies_texts> countCurrencies_texts() {
        return new CountRequestBuilder<Currencies_texts>(servicePath, Currencies_texts.class, "Currencies_texts");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Currencies_texts> getCurrencies_textsByKey(
        @Nonnull
        final String locale,
        @Nonnull
        final String code) {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("locale", locale);
        key.put("code", code);
        return new GetByKeyRequestBuilder<Currencies_texts>(servicePath, Currencies_texts.class, key, "Currencies_texts");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Currencies_texts> createCurrencies_texts(
        @Nonnull
        final Currencies_texts currencies_texts) {
        return new CreateRequestBuilder<Currencies_texts>(servicePath, currencies_texts, "Currencies_texts");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Currencies_texts> updateCurrencies_texts(
        @Nonnull
        final Currencies_texts currencies_texts) {
        return new UpdateRequestBuilder<Currencies_texts>(servicePath, currencies_texts, "Currencies_texts");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Currencies_texts> deleteCurrencies_texts(
        @Nonnull
        final Currencies_texts currencies_texts) {
        return new DeleteRequestBuilder<Currencies_texts>(servicePath, currencies_texts, "Currencies_texts");
    }

}
